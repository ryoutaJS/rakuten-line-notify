AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.12

  Sample SAM Template for backend

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Parameters:
  StageName:
    Type: "String"
    Default: "v1"
  ItemsTableName:
    Type: String
    Default: "Items"
  LogRetentionInDays:
    Type: Number
    Default: 1

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      MethodSettings:
        - DataTraceEnabled: false
          ResourcePath: "/*"
          HttpMethod: "*"
      Cors:
        AllowOrigin: "'*'"
        AllowCredentials: false
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,X-CSRF-TOKEN,Access-Control-Allow-Origin'"
  ItemActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      PackageType: Image
      Events:
        ItemActionFetch:
          Type: Api # api gateway経由でイベントを受け取る
          Properties:
            RestApiId: !Ref MyApi # 上記で作成したapi gatewayを参照
            # このパスのイベントを受け取ったときにItemActionラムダを実行
            Path: /api/fetch_item
            Method: get
        ItemActionDelete:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/delete_item
            Method: post
      Environment:
        Variables:
          DYNAMO_ENDPOINT_URL: "http://dynamodb.ap-northeast-1.amazonaws.com"
    Metadata:
      Dockerfile: ./item/Dockerfile
      DockerContext: ./
      DockerTag: python3.12-v1

  # 商品価格のLINE通知Lambda（EventBridgeで毎日お昼の12時に実行するように設定）
  PriceLineNotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      PackageType: Image
      Events:
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: cron(0 3 * * ? *)
            Enabled: true
            Name: LineNotifySchedule
            Description: price line notify schedule.
    Metadata:
      Dockerfile: ./price_line_notify/Dockerfile
      DockerContext: ./
      DockerTag: python3.12-v1

  # cloud watchのロググループの設定
  ItemActionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ItemActionFunction}
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: RakutenPriceNotifyDeveloper
          Value: Green

  # dynamoDBの設定
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ItemsTableName
      AttributeDefinitions:
        - AttributeName: itemCode
          AttributeType: S
      KeySchema:
        - AttributeName: itemCode
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  FetchItemApi:
    Description: "API Gateway endpoint URL for Prod stage for ItemAction function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/fetch_item/"
  DeleteItemApi:
    Description: "API Gateway endpoint URL for Prod stage for ItemAction function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/delete_item/"
  ItemActionFunction:
    Description: "Item Action Function Lambda Function ARN"
    Value: !GetAtt ItemActionFunction.Arn
  ItemActionFunctionIamRole:
    Description: "Implicit IAM Role created for Item Action Function function"
    Value: !GetAtt ItemActionFunctionRole.Arn
